private static bool IsInstanceOfSchema(Schema schema, object value)
{
    if (schema.Tag == Schema.Type.Null && value == null)
        return true;

    if (value == null)
        return false;

    if (schema is LogicalSchema logicalSchema)
        return IsInstanceOfSchema(logicalSchema.BaseSchema, value);

    switch (schema.Tag)
    {
        case Schema.Type.Record:
            var recordSchema = (RecordSchema)schema;
            var valueType = value.GetType();
            // Match based on full name if available
            return valueType.Name.Equals(recordSchema.Name, StringComparison.OrdinalIgnoreCase) ||
                   recordSchema.Fields.All(f =>
                       valueType.GetProperty(f.Name, BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase) != null);

        case Schema.Type.String:
            return value is string;

        case Schema.Type.Int:
            return value is int;

        case Schema.Type.Long:
            return value is long || value is DateTime;

        case Schema.Type.Boolean:
            return value is bool;

        case Schema.Type.Float:
            return value is float;

        case Schema.Type.Double:
            return value is double;

        case Schema.Type.Enum:
            return value.GetType().IsEnum;

        case Schema.Type.Array:
            return value is IEnumerable;

        default:
            return false;
    }
}
