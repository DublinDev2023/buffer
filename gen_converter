using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using Avro;
using Avro.Generic;

public static class AvroConverter1
{
    // === Public API ===

    public static GenericRecord ToGenericRecord(object obj, RecordSchema schema)
    {
        if (obj == null) throw new ArgumentNullException(nameof(obj));
        if (schema == null) throw new ArgumentNullException(nameof(schema));
        return (GenericRecord)ConvertToAvroValue(obj, schema)!;
    }

    public static T FromGenericRecord<T>(GenericRecord record) where T : new()
    {
        if (record == null) throw new ArgumentNullException(nameof(record));
        return (T)ConvertFromAvroValue(record, typeof(T))!;
    }

    // === Serialization ===

    private static object? ConvertToAvroValue(object? value, Schema schema)
    {
        if (value == null) return null;

        if (schema is UnionSchema unionSchema)
        {
            var branchSchema = GetUnionBranchSchema(unionSchema, value);
            return ConvertToAvroValue(value, branchSchema);
        }

        if (schema is LogicalSchema logicalSchema)
        {
            return ConvertToAvroValue(value, logicalSchema.BaseSchema);
        }

        switch (schema.Tag)
        {
            case Schema.Type.Record:
                var recordSchema = (RecordSchema)schema;
                var record = new GenericRecord(recordSchema);
                var type = value.GetType();

                foreach (var field in recordSchema.Fields)
                {
                    var prop = type.GetProperty(field.Name, BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase);
                    var fieldValue = prop?.GetValue(value);
                    record.Add(field.Name, ConvertToAvroValue(fieldValue, field.Schema));
                }

                return record;

            case Schema.Type.Array:
                var arraySchema = (ArraySchema)schema;
                var list = ((IEnumerable)value).Cast<object>().ToList();
                return list.Select(item => ConvertToAvroValue(item, arraySchema.ItemSchema)).ToList();

            case Schema.Type.String:
                return value.ToString();

            case Schema.Type.Int:
                return Convert.ToInt32(value);

            case Schema.Type.Long:
                if (value is DateTime dt)
                {
                    var epoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
                    return (long)(dt.ToUniversalTime() - epoch).TotalMilliseconds;
                }
                return Convert.ToInt64(value);

            case Schema.Type.Boolean:
                return Convert.ToBoolean(value);

            case Schema.Type.Float:
                return Convert.ToSingle(value);

            case Schema.Type.Double:
                return Convert.ToDouble(value);

            case Schema.Type.Enum:
                return value.ToString();

            case Schema.Type.Null:
                return null;

            default:
                throw new NotSupportedException($"Unsupported schema type: {schema.Tag}");
        }
    }

    // === Deserialization ===

    private static object? ConvertFromAvroValue(object? value, Type targetType)
    {
        if (value == null) return null;

        if (value is GenericRecord genericRecord)
        {
            var obj = Activator.CreateInstance(targetType)!;

            foreach (var prop in targetType.GetProperties(BindingFlags.Public | BindingFlags.Instance))
            {
                var field = genericRecord.Schema.Fields
                    .FirstOrDefault(f => string.Equals(f.Name, prop.Name, StringComparison.OrdinalIgnoreCase));

                if (field == null) continue;

                var fieldValue = genericRecord[field.Name];
                var propValue = ConvertFromAvroValue(fieldValue, prop.PropertyType);
                prop.SetValue(obj, propValue);
            }

            return obj;
        }

        if (typeof(IEnumerable).IsAssignableFrom(targetType) && targetType != typeof(string))
        {
            var elementType = targetType.IsArray
                ? targetType.GetElementType()
                : targetType.GetGenericArguments().FirstOrDefault() ?? typeof(object);

            var list = (IList)Activator.CreateInstance(typeof(List<>).MakeGenericType(elementType))!;
            foreach (var item in (IEnumerable)value)
            {
                list.Add(ConvertFromAvroValue(item, elementType));
            }

            if (targetType.IsArray)
            {
                var array = Array.CreateInstance(elementType!, list.Count);
                list.CopyTo(array, 0);
                return array;
            }

            return list;
        }

        if (targetType == typeof(DateTime) && value is long millis)
        {
            var epoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
            return epoch.AddMilliseconds(millis).ToLocalTime();
        }

        if (targetType.IsEnum)
        {
            return Enum.Parse(targetType, value.ToString()!);
        }

        return Convert.ChangeType(value, targetType);
    }

    // === Schema Matching Helpers ===

    private static Schema GetUnionBranchSchema(UnionSchema unionSchema, object value)
    {
        foreach (var schema in unionSchema.Schemas)
        {
            if (IsInstanceOfSchema(schema, value))
                return schema;
        }

        throw new InvalidOperationException($"No matching schema found in union for value of type {value.GetType().FullName}");
    }

    private static bool IsInstanceOfSchema(Schema schema, object value)
    {
        if (schema.Tag == Schema.Type.Null && value == null)
            return true;

        if (value == null)
            return false;

        if (schema is LogicalSchema logicalSchema)
        {
            if ((logicalSchema.LogicalTypeName == "timestamp-millis" || logicalSchema.LogicalTypeName == "timestamp-micros")
                && value is DateTime)
            {
                return true;
            }

            return IsInstanceOfSchema(logicalSchema.BaseSchema, value);
        }

        switch (schema.Tag)
        {
            case Schema.Type.Record:
                var recordSchema = (RecordSchema)schema;
                var type = value.GetType();
                return recordSchema.Fields.All(f =>
                    type.GetProperty(f.Name, BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase) != null);

            case Schema.Type.String:
                return value is string;

            case Schema.Type.Int:
                return value is int;

            case Schema.Type.Long:
                return value is long || value is DateTime;

            case Schema.Type.Boolean:
                return value is bool;

            case Schema.Type.Float:
                return value is float;

            case Schema.Type.Double:
                return value is double;

            case Schema.Type.Enum:
                return value.GetType().IsEnum;

            case Schema.Type.Array:
                return value is IEnumerable;

            default:
                return false;
        }
    }
}
