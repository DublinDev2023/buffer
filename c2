using Avro;
using Avro.Generic;
using Avro.IO;
using System;
using System.Collections.Generic;
using System.IO;

class Program
{
    static void Main()
    {
        // Define schema (normally you'd load this from .avsc)
        var schemaJson = @"
        {
          ""type"": ""record"",
          ""name"": ""GenericMessage"",
          ""fields"": [
            { ""name"": ""Header"", ""type"": {
                ""type"": ""record"",
                ""name"": ""GenericHeader"",
                ""fields"": [
                  { ""name"": ""MessageId"", ""type"": ""string"" }
                ]
            }},
            { ""name"": ""Payload"", ""type"": {
              ""type"": ""array"",
              ""items"": {
                ""type"": ""record"",
                ""name"": ""GenericPayload"",
                ""fields"": [
                  { ""name"": ""AppData"", ""type"": {
                    ""type"": ""record"",
                    ""name"": ""MyAppData"",
                    ""fields"": [
                      { ""name"": ""Reason"", ""type"": ""string"" }
                    ]
                  }}
                ]
              }
            }}
          ]
        }";

        var schema = Schema.Parse(schemaJson);

        // Original C# object
        var message = new GenericMessage
        {
            Header = new GenericHeader { MessageId = "XYZ-123" },
            Payload = new List<GenericPayload>
            {
                new GenericPayload
                {
                    AppData = new MyAppData { Reason = "TestReason" }
                }
            }
        };

        // Build GenericRecord
        var messageSchema = (RecordSchema)schema;
        var headerSchema = (RecordSchema)messageSchema.GetField("Header").Schema;
        var payloadSchema = (ArraySchema)messageSchema.GetField("Payload").Schema;
        var payloadItemSchema = (RecordSchema)payloadSchema.ItemSchema;
        var appDataSchema = (RecordSchema)payloadItemSchema.GetField("AppData").Schema;

        var headerRecord = new GenericRecord(headerSchema);
        headerRecord.Add("MessageId", message.Header.MessageId);

        var payloadRecords = new List<GenericRecord>();
        foreach (var payload in message.Payload)
        {
            var appData = (MyAppData)payload.AppData;

            var appDataRecord = new GenericRecord(appDataSchema);
            appDataRecord.Add("Reason", appData.Reason);

            var payloadRecord = new GenericRecord(payloadItemSchema);
            payloadRecord.Add("AppData", appDataRecord);

            payloadRecords.Add(payloadRecord);
        }

        var genericMessage = new GenericRecord(messageSchema);
        genericMessage.Add("Header", headerRecord);
        genericMessage.Add("Payload", payloadRecords);

        // Serialize to bytes
        byte[] data;
        using (var stream = new MemoryStream())
        {
            var encoder = new BinaryEncoder(stream);
            var writer = new GenericWriter<GenericRecord>(schema);
            writer.Write(genericMessage, encoder);
            encoder.Flush();
            data = stream.ToArray();
        }

        // Deserialize from bytes
        GenericRecord deserializedRecord;
        using (var stream = new MemoryStream(data))
        {
            var decoder = new BinaryDecoder(stream);
            var reader = new GenericReader<GenericRecord>(schema, schema);
            deserializedRecord = reader.Read(null, decoder);
        }

        // Map to C# object
        var result = AvroMapper.MapGenericRecordTo<GenericMessage>(deserializedRecord);

        // âœ… Confirm values
        Console.WriteLine($"MessageId: {result.Header.MessageId}");
        var appData = result.Payload[0].AppData as MyAppData;
        Console.WriteLine($"AppData.Reason: {appData?.Reason}");
    }
}
