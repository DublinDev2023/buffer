using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;
using System.Reflection;
using Avro;
using Avro.Generic;

public static class AvroGenericMapper6
{
    // Convert CLR object to Avro GenericRecord
    public static GenericRecord ToGenericRecord(object obj, RecordSchema schema)
    {
        var record = new GenericRecord(schema);

        foreach (var field in schema.Fields)
        {
            var prop = obj.GetType().GetProperty(field.Name, BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase);
            if (prop == null) continue;

            var value = prop.GetValue(obj);
            var avroValue = ConvertToAvroValue(value, field.Schema);
            record.Add(field.Name, avroValue);
        }

        return record;
    }

    private static object ConvertToAvroValue(object value, Schema schema)
    {
        if (schema is UnionSchema unionSchema)
        {
            if (value == null && unionSchema.Schemas.Any(s => s.Tag == Schema.Type.Null))
                return null;

            var actualSchema = unionSchema.Schemas.First(s => s.Tag != Schema.Type.Null);
            return ConvertToAvroValue(value, actualSchema);
        }

        if (value == null)
            throw new InvalidOperationException($"Null value not allowed for schema '{schema.Name}'");

        switch (schema.Tag)
        {
            case Schema.Type.Null:
                return null;

            case Schema.Type.Boolean:
            case Schema.Type.Int:
            case Schema.Type.Long:
            case Schema.Type.Float:
            case Schema.Type.Double:
            case Schema.Type.String:
            case Schema.Type.Bytes:
                return value;

            case Schema.Type.Record:
                return ToGenericRecord(value, (RecordSchema)schema);

            case Schema.Type.Array:
                var arraySchema = (ArraySchema)schema;
                var list = new List<object>();
                foreach (var item in (IEnumerable)value)
                    list.Add(ConvertToAvroValue(item, arraySchema.ItemSchema));
                return list;

            case Schema.Type.Enum:
                return new GenericEnum((EnumSchema)schema, value.ToString());

            case Schema.Type.Logical:
                return ConvertLogicalToAvro(value, (LogicalSchema)schema);

            default:
                throw new NotSupportedException($"Unsupported schema type for serialization: {schema.Tag}");
        }
    }

    private static object ConvertLogicalToAvro(object value, LogicalSchema logicalSchema)
    {
        switch (logicalSchema.LogicalTypeName)
        {
            case "timestamp-millis":
                if (value is DateTime dt)
                {
                    var utc = dt.Kind == DateTimeKind.Unspecified
                        ? DateTime.SpecifyKind(dt, DateTimeKind.Utc)
                        : dt.ToUniversalTime();
                    return (long)(utc - DateTime.UnixEpoch).TotalMilliseconds;
                }
                throw new InvalidCastException("Expected DateTime for timestamp-millis");

            default:
                throw new NotSupportedException($"Unsupported logical type: {logicalSchema.LogicalTypeName}");
        }
    }

    // Convert Avro GenericRecord to CLR object
    public static object FromGenericRecord(GenericRecord record, Type targetType)
    {
        var instance = Activator.CreateInstance(targetType);

        foreach (var field in record.Schema.Fields)
        {
