using Avro;
using Avro.Generic;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;

public static class AvroGenericConverter
{
    public static GenericRecord ConvertToGenericRecord(object obj, RecordSchema schema)
    {
        var record = new GenericRecord(schema);

        foreach (var field in schema.Fields)
        {
            var prop = obj.GetType().GetProperty(field.Name);
            if (prop == null) continue;

            var value = prop.GetValue(obj);
            var fieldSchema = UnwrapNullable(field.Schema);

            object converted = ConvertValue(value, fieldSchema);
            record.Add(field.Name, converted);
        }

        return record;
    }

    private static object ConvertValue(object value, Schema schema)
    {
        if (value == null) return null;

        switch (schema)
        {
            case PrimitiveSchema _:
                return value;

            case RecordSchema recSchema:
                return ConvertToGenericRecord(value, recSchema);

            case ArraySchema arrSchema:
                var list = new List<object>();
                foreach (var item in (IEnumerable)value)
                {
                    list.Add(ConvertValue(item, UnwrapNullable(arrSchema.ItemSchema)));
                }
                return list;

            case UnionSchema union:
                var actual = union.Schemas.First(s => s.Type != Schema.Type.Null);
                return ConvertValue(value, actual);

            default:
                throw new NotSupportedException($"Unsupported schema type: {schema.Type}");
        }
    }

    private static Schema UnwrapNullable(Schema schema)
    {
        if (schema is UnionSchema union && union.Schemas.Count == 2 &&
            union.Schemas.Any(s => s.Type == Schema.Type.Null))
        {
            return union.Schemas.First(s => s.Type != Schema.Type.Null);
        }
        return schema;
    }
}
