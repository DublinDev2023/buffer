using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using Avro;
using Avro.Generic;

public static class AvroConverter21
{
    public static GenericRecord ToGenericRecord(object obj, RecordSchema schema)
    {
        return (GenericRecord)ConvertToAvroValue(obj, schema)!;
    }

    public static object FromGenericRecord(GenericRecord record, Type targetType)
    {
        return ConvertFromAvroValue(record, targetType, record.Schema)!;
    }

    private static object? ConvertToAvroValue(object? value, Schema schema)
    {
        if (value == null) return null;

        switch (schema.Tag)
        {
            case Schema.Type.Record:
                var recordSchema = (RecordSchema)schema;
                var result = new GenericRecord(recordSchema);
                var type = value.GetType();

                foreach (var field in recordSchema.Fields)
                {
                    var prop = type.GetProperty(field.Name);
                    if (prop == null) continue;

                    var propValue = prop.GetValue(value);
                    result.Add(field.Name, ConvertToAvroValue(propValue, field.Schema));
                }

                return result;

            case Schema.Type.Array:
                var arraySchema = (ArraySchema)schema;
                var list = ((IEnumerable)value).Cast<object>().ToList();
                return list.Select(item => ConvertToAvroValue(item, arraySchema.ItemSchema)).ToList();

            case Schema.Type.Union:
                var unionSchema = (UnionSchema)schema;
                var actualSchema = unionSchema.Schemas.FirstOrDefault(s => s.Tag != Schema.Type.Null) ?? unionSchema.Schemas[0];
                return ConvertToAvroValue(value, actualSchema);

            default:
                return value;
        }
    }

    private static object? ConvertFromAvroValue(object? value, Type targetType, Schema schema)
    {
        if (value == null) return null;

        switch (schema.Tag)
        {
            case Schema.Type.Record:
                var record = (GenericRecord)value;
                var instance = Activator.CreateInstance(targetType)!;
                foreach (var field in ((RecordSchema)schema).Fields)
                {
                    var prop = targetType.GetProperty(field.Name);
                    if (prop == null) continue;

                    var propType = prop.PropertyType;
                    var fieldValue = record.TryGetValue(field.Name, out var val) ? val : null;
                    var converted = ConvertFromAvroValue(fieldValue, propType, field.Schema);
                    prop.SetValue(instance, converted);
                }
                return instance;

            case Schema.Type.Array:
                var arraySchema = (ArraySchema)schema;
                var itemType = targetType.IsArray
                    ? targetType.GetElementType()
                    : targetType.GetGenericArguments().FirstOrDefault() ?? typeof(object);

                var list = (IList)Activator.CreateInstance(typeof(List<>).MakeGenericType(itemType))!;
                foreach (var item in (IEnumerable)value)
                {
                    list.Add(ConvertFromAvroValue(item, itemType, arraySchema.ItemSchema));
                }

                return list;

            case Schema.Type.Union:
                var unionSchema = (UnionSchema)schema;
                var nonNull = unionSchema.Schemas.FirstOrDefault(s => s.Tag != Schema.Type.Null) ?? unionSchema.Schemas[0];
                return ConvertFromAvroValue(value, targetType, nonNull);

            default:
                return value;
        }
    }
}
