using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using Avro;
using Avro.Generic;

public static class AvroGenericMapper4
{
    // Convert CLR object to Avro GenericRecord
    public static GenericRecord ToGenericRecord(object obj, RecordSchema schema)
    {
        var record = new GenericRecord(schema);

        foreach (var field in schema.Fields)
        {
            var prop = obj.GetType().GetProperty(field.Name, BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase);
            if (prop == null) continue;

            var value = prop.GetValue(obj);
            var avroValue = ConvertToAvroValue(value, field.Schema); // pass full schema (may be Union)
            record.Add(field.Name, avroValue);
        }

        return record;
    }

    // Convert CLR value to Avro-compatible value
    private static object ConvertToAvroValue(object value, Schema schema)
    {
        if (schema is UnionSchema unionSchema)
        {
            if (value == null && unionSchema.Schemas.Any(s => s.Tag == Schema.Type.Null))
                return null;

            var nonNullSchema = unionSchema.Schemas.First(s => s.Tag != Schema.Type.Null);
            return ConvertToAvroValue(value, nonNullSchema);
        }

        if (value == null)
        {
            throw new InvalidOperationException($"Value is null, but schema '{schema}' does not allow nulls.");
        }

        switch (schema)
        {
            case PrimitiveSchema _:
                return value;

            case RecordSchema recSchema:
                return ToGenericRecord(value, recSchema);

            case ArraySchema arrSchema:
                var list = new List<object>();
                foreach (var item in (IEnumerable)value)
                {
                    list.Add(ConvertToAvroValue(item, arrSchema.ItemSchema));
                }
                return list;

            default:
                throw new NotSupportedException($"Unsupported schema type for serialization: {schema.Tag}");
        }
    }

    // Convert Avro GenericRecord to CLR object
    public static object FromGenericRecord(GenericRecord record, Type targetType)
    {
        var instance = Activator.CreateInstance(targetType);

        foreach (var field in record.Schema.Fields)
        {
            var prop = targetType.GetProperty(field.Name, BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase);
            if (prop == null || !prop.CanWrite) continue;

            var avroValue = record[field.Name];
            var clrValue = ConvertToClrValue(avroValue, prop.PropertyType, field.Schema);
            prop.SetValue(instance, clrValue);
        }

        return instance;
    }

    // Convert Avro-compatible value to CLR type
    private static object ConvertToClrValue(object value, Type targetType, Schema schema)
    {
        if (schema is UnionSchema unionSchema)
        {
            if (value == null) return null;

            var activeSchema = unionSchema.Schemas.First(s =>
            {
                if (s.Tag == Schema.Type.Null) return false;
                return true;
            });

            return ConvertToClrValue(value, targetType, activeSchema);
        }

        if (value == null) return null;

        if (schema is PrimitiveSchema)
        {
            return Convert.ChangeType(value, Nullable.GetUnderlyingType(targetType) ?? targetType);
        }

        if (schema is RecordSchema recSchema)
        {
            return FromGenericRecord((GenericRecord)value, targetType);
        }

        if (schema is ArraySchema arraySchema)
        {
            var itemType = targetType.IsArray
                ? targetType.GetElementType()
                : targetType.GetGenericArguments().FirstOrDefault() ?? typeof(object);

            var resultList = (IList)Activator.CreateInstance(typeof(List<>).MakeGenericType(itemType));
            foreach (var item in (IEnumerable)value)
            {
                var convertedItem = ConvertToClrValue(item, itemType, arraySchema.ItemSchema);
                resultList.Add(convertedItem);
            }

            if (targetType.IsArray)
            {
                var array = Array.CreateInstance(itemType, resultList.Count);
                resultList.CopyTo(array, 0);
                return array;
            }

            return resultList;
        }

        throw new NotSupportedException($"Unsupported schema type for deserialization: {schema.Tag}");
    }
}
