public static GenericRecord ConvertToGenericRecord(object obj, RecordSchema schema)
    {
        var record = new GenericRecord(schema);

        foreach (var field in schema.Fields)
        {
            var prop = obj.GetType().GetProperty(field.Name);
            if (prop == null) continue;

            var value = prop.GetValue(obj);
            var fieldSchema = UnwrapNullable(field.Schema);

            var converted = ConvertValue(value, fieldSchema);
            record.Add(field.Name, converted);
        }

        return record;
    }

    private static object ConvertValue(object value, Schema schema)
    {
        if (value == null)
        {
            if (schema is UnionSchema union && union.Schemas.Any(s => s.Tag == Schema.Type.Null))
                return null;

            throw new InvalidOperationException("Value is null but schema doesn't allow nulls.");
        }

        switch (schema)
        {
            case PrimitiveSchema _:
                return value;

            case RecordSchema recordSchema:
                return ConvertToGenericRecord(value, recordSchema);

            case ArraySchema arraySchema:
                var result = new List<object>();
                foreach (var item in (IEnumerable)value)
                {
                    var itemSchema = UnwrapNullable(arraySchema.ItemSchema);
                    result.Add(ConvertValue(item, itemSchema));
                }
                return result;

            case UnionSchema union:
                var nonNullSchema = union.Schemas.FirstOrDefault(s => s.Tag != Schema.Type.Null);
                return ConvertValue(value, nonNullSchema);

            default:
                throw new NotSupportedException($"Unsupported schema type: {schema.Tag}");
        }
    }

    private static Schema UnwrapNullable(Schema schema)
    {
        if (schema is UnionSchema union &&
            union.Schemas.Count == 2 &&
            union.Schemas.Any(s => s.Tag == Schema.Type.Null))
        {
            return union.Schemas.First(s => s.Tag != Schema.Type.Null);
        }
        return schema;
    }
