using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using Avro;
using Avro.Generic;
using Newtonsoft.Json.Linq;

public static class AvroGenericConverter03
{
    public static GenericRecord ToGenericRecord(object obj, RecordSchema schema)
    {
        var record = new GenericRecord(schema);
        foreach (var field in schema.Fields)
        {
            var prop = obj.GetType().GetProperty(field.Name, BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase);
            if (prop == null) continue;

            var value = prop.GetValue(obj);
            var avroValue = ConvertToAvroValue(value, field.Schema);
            record.Add(field.Name, avroValue);
        }
        return record;
    }

    private static object ConvertToAvroValue(object value, Schema schema)
    {
        if (schema is UnionSchema unionSchema)
        {
            if (value == null && unionSchema.Schemas.Any(s => s.Tag == Schema.Type.Null))
                return null;

            // Try to match JObject to one of the union options
            foreach (var subSchema in unionSchema.Schemas.Where(s => s.Tag != Schema.Type.Null))
            {
                try
                {
                    return ConvertToAvroValue(value, subSchema);
                }
                catch { /* Try next schema */ }
            }

            throw new InvalidOperationException($"No matching schema in union for value of type {value?.GetType()}");
        }

        if (value == null)
            throw new InvalidOperationException($"Null value not allowed for schema '{schema.Name}'");

        switch (schema.Tag)
        {
            case Schema.Type.Null:
                return null;
            case Schema.Type.Boolean:
            case Schema.Type.Int:
            case Schema.Type.Long:
            case Schema.Type.Float:
            case Schema.Type.Double:
            case Schema.Type.String:
            case Schema.Type.Bytes:
                return value;
            case Schema.Type.Record:
                if (value is JObject jObj)
                {
                    var schemaFields = ((RecordSchema)schema).Fields;
                    var typedObj = Activator.CreateInstance(typeof(Dictionary<string, object>));
                    return ToGenericRecord(jObj.ToObject<object>(), (RecordSchema)schema);
                }
                return ToGenericRecord(value, (RecordSchema)schema);
            case Schema.Type.Array:
                var arraySchema = (ArraySchema)schema;
                var list = new List<object>();
                foreach (var item in (IEnumerable)value)
                    list.Add(ConvertToAvroValue(item, arraySchema.ItemSchema));
                return list;
            case Schema.Type.Enum:
                return new GenericEnum((EnumSchema)schema, value.ToString());
            case Schema.Type.Logical:
                return ConvertLogicalToAvro(value, (LogicalSchema)schema);
            default:
                throw new NotSupportedException($"Unsupported schema type for serialization: {schema.Tag}");
        }
    }

    private static object ConvertLogicalToAvro(object value, LogicalSchema logicalSchema)
    {
        switch (logicalSchema.LogicalTypeName)
        {
            case "timestamp-millis":
                if (value is DateTime dt)
                    return (long)(dt.ToUniversalTime() - DateTime.UnixEpoch).TotalMilliseconds;
                throw new InvalidCastException("Expected DateTime for timestamp-millis");
            default:
                throw new NotSupportedException($"Unsupported logical type: {logicalSchema.LogicalTypeName}");
        }
    }

    public static object FromGenericRecord(GenericRecord record, Type targetType)
    {
        var instance = Activator.CreateInstance(targetType);
        foreach (var field in record.Schema.Fields)
        {
            var prop = targetType.GetProperty(field.Name, BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase);
            if (prop == null || !prop.CanWrite) continue;

            var avroValue = record[field.Name];
            var clrValue = ConvertToClrValue(avroValue, prop.PropertyType, field.Schema);
            prop.SetValue(instance, clrValue);
        }
        return instance;
    }

    private static object ConvertToClrValue(object value, Type targetType, Schema schema)
    {
        if (schema is UnionSchema union)
        {
            if (value == null) return null;
            foreach (var subSchema in union.Schemas.Where(s => s.Tag != Schema.Type.Null))
            {
                try
                {
                    return ConvertToClrValue(value, targetType, subSchema);
                }
                catch { /* try next */ }
            }
            throw new InvalidOperationException($"No matching union schema for type {targetType}");
        }

        if (value == null) return null;

        switch (schema.Tag)
        {
            case Schema.Type.Null:
                return null;
            case Schema.Type.Boolean:
            case Schema.Type.Int:
            case Schema.Type.Long:
            case Schema.Type.Float:
            case Schema.Type.Double:
            case Schema.Type.String:
            case Schema.Type.Bytes:
                return Convert.ChangeType(value, Nullable.GetUnderlyingType(targetType) ?? targetType);
            case Schema.Type.Record:
                if (targetType == typeof(JObject))
                {
                    var dict = new Dictionary<string, object>();
                    foreach (var f in ((RecordSchema)schema).Fields)
                        dict[f.Name] = ((GenericRecord)value)[f.Name];
                    return JObject.FromObject(dict);
                }
                return FromGenericRecord((GenericRecord)value, targetType);
            case Schema.Type.Array:
                var arraySchema = (ArraySchema)schema;
                var itemType = targetType.IsArray
                    ? targetType.GetElementType()
                    : targetType.GetGenericArguments().FirstOrDefault() ?? typeof(object);
                var list = (IList)Activator.CreateInstance(typeof(List<>).MakeGenericType(itemType));
                foreach (var item in (IEnumerable)value)
                    list.Add(ConvertToClrValue(item, itemType, arraySchema.ItemSchema));
                if (targetType.IsArray)
                {
                    var arr = Array.CreateInstance(itemType, list.Count);
                    list.CopyTo(arr, 0);
                    return arr;
                }
                return list;
            case Schema.Type.Enum:
                return Enum.Parse(targetType, value.ToString());
            case Schema.Type.Logical:
                return ConvertLogicalToClr(value, (LogicalSchema)schema, targetType);
            default:
                throw new NotSupportedException($"Unsupported schema type for deserialization: {schema.Tag}");
        }
    }

    private static object ConvertLogicalToClr(object value, LogicalSchema schema, Type targetType)
    {
        switch (schema.LogicalTypeName)
        {
            case "timestamp-millis":
                var millis = Convert.ToInt64(value);
                return DateTime.UnixEpoch.AddMilliseconds(millis).ToLocalTime();
            default:
                throw new NotSupportedException($"Logical type not supported: {schema.LogicalTypeName}");
        }
    }
}
